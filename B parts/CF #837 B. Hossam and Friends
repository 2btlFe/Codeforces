/*
CF #837 B. Hossam and Friends
Algorithm: Sort, Two_Pointer
TC: O(N)
SC: O(N)
Explaination:

시작점 과 가장 가까운 구간을 서로 
라인스위핑하여 푼다

1) 가장 가까운 구간을 찾기 위해 (a,b)에서 b를 기준으로 정렬한다
2) 시작점 i와 (a,b)의 위치 관계를 확인할 때, i가 a보다 크다면, 
   어차피 구간을 포함하지 않으므로 다음 구간 후보로 넘어간다(idx++)
3) 구간을 포함할 수 도 있다면(i <= a), b보다 한 칸 작은 곳까지 선택할 수 있으므로
   sum += b - i로 한다
4) idx가 다 끝나거나, 아예 유효한 구간이 나타나지 않는다면, 예외 처리해준다.
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define len(x) (int) (x).size()
#define all(x) x.begin(), (x).end()
#define endl "\n"
 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int T;
    cin >> T;
     
    while(T--) {
        int n, m; cin >> n >> m;
        vector<pair<int, int> > v;
        for(int i = 0; i < m; i++) {
            int a, b;
            cin >> a >> b;
            if(a < b) swap(a, b);
            v.push_back({a, b});
        }
        sort(all(v));
        
        ll sum = 0;
        int idx = 0;
        for(int i = 1; i <= n; i++) {
            ll ret = 1;
            
            while(true) {
                if(idx >= m) {
                    ret = n + 1 - i;
                    break;
                }
                
                int l, r; 
                l = v[idx].second;
                r = v[idx].first;

                if(i > l) {
                    idx++;
                } else {
                    ret = r - i;
                    break;
                }
            }
            sum += ret;
        }
        
        cout << sum << endl;
        
    }
}
 
