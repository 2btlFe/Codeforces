/*
CF #837 C. Hossam and Trainees
Algorithm: seive of Eratosthenes, Number Theory
TC: O(N*len(prime)) -> O(10^5)*O(sqrt(10^9)보다 작은 소수의 개수 < 1000)
SC: O(10^6+6)
Explaination:

에라토스테네스의 체로 소수들을 미리 솎아낸 뒤
그 소수들을 이용해 소인수 분해를 한다 O(len(prime)) 

작은 수는 이런 과정으로도 소인수 분해가 가능하지만
10^18 정도 되는 큰 수를 소인수 분해하고 싶다면
폴라드 로 알고리즘을 써야 한다
*/

#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define len(x) (int) (x).size()
#define all(x) x.begin(), (x).end()
#define endl "\n"
 
const int N = 1e6 + 6;
vector<int> isprime(N, 1); 
vector<int> sprime;
 
void seive(int n) {
    isprime[0] = isprime[1] = 0;
    //sprime.push_back(0);
    for(int i = 2; i <= n; i++) {
        if(isprime[i]) {
            sprime.push_back(i);
            for(int j = i*i; j <= n; j+=i) {
                isprime[j]=0;
            }
        }
    }
}
 
void solve() {
    int n; cin >> n;
    vector<int> v(n);
    set<int> st;
    for(int &x : v) cin >> x;
    for(int i = 0; i < n; i++) {
        int tp = v[i];
        for(int j = 0; j < sprime.size(); j++) {
            if(tp%sprime[j] == 0) {
                if(!st.empty()) {
                    if(st.find(sprime[j]) != st.end()) {
                        cout << "YES" << endl;
                        return;
                    }
                }
                st.insert(sprime[j]);
                while(tp%sprime[j] == 0) {
                    tp/=sprime[j];
                } 
            }
        }
        
        //sqrt(10^9)보다 큰 소수여서 소인수 분해가 되지 않으면 그냥 소수로 넣어준다
        if(tp != 1) {
            if(!st.empty()) {
                if(st.find(tp) != st.end()) {
                    cout << "YES" << endl;
                    return;
                }
            }
            st.insert(tp);
        }
    }
    cout << "NO" << endl;
}
 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    seive(int(sqrt(1e9))); //3401보다 작고, <1000
 
    int T;
    cin >> T;
    while(T--) {
        solve();
    }
}
