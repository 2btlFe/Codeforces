/*
CFGR #19 C. Andrew and Stones
Algorithm: Greedy
Time Complexity: O(n)
Explaination: 
최소 경우의 수를 찾는 경우에
1) 안 되는 경우는 거르기
2) 나머지 경우에 대해서는 각각의 최소값을 더해주기
짝수의 경우, 그냥 2로 나눈 몫이 누적됨
홀수의 경우, 최소의 경우는 +1 된 다음에 2로 나눈 몫이 누적됨

이렇게 최소의 경우를 그리디하게 풀어주면 된다
괜히 구현 생각할 필요 없다
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define len(x) (int) (x).size()
#define all(x) x.begin(), (x).end()
#define endl "\n"

int main()
{
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  std::ios_base::sync_with_stdio(false);

  int t;
  cin >> t;
  while(t--) {
    int n;
    cin >> n;

    vector<int> v(n);
    for(int& x : v) cin >> x;

    //불가능한 경우
    if(*max_element(v.begin()+1, v.end()-1) == 1 || (n == 3 && v[1]%2 == 1)){
      cout << -1 << endl;
      continue;
    }

    //가능한 경우 최소 경우의 수 -> 짝수면 더해주는 값 없음 홀수면 1만 더하는 것이 최소 경우임
    ll ret = 0;
    for(int i = 1; i < v.size() - 1; i++) {
      ret += ceil((double)(v[i])/2.0);
    }

    cout << ret << endl;
  }
}
