/*
ECF 142 D. Fixed Prefix Permutations
Algorithm: Inverse, Binary_Search, Trie, Sort
TC: O(nmlogn)
SC: O(nm)
Explaination:

2가지를 얻었다
1) 역함수 만들기
    vector<vector<int> > b(n, vector<int> (m, 0));
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            b[i][a[i][j]] = j;
        }
    }
2) 다양한 자료들에서 prefix가 가장 동일한 string 찾기
    1. string을 sorting 해두기
    2. lower_bound로 j번째와 j-1번째 시도하기
        int j = lower_bound(all(b), a[i]) - b.begin();
        if(j > 0) ret = max(ret, get(a[i], b[j-1]));
        if(j < n) ret = max(ret, get(a[i], b[j]));
*/

#include <bits/stdc++.h>
#define ll long long
#define endl "\n"
#define all(x) x.begin(), x.end()

using namespace std;
 
int get(const vector<int>& a, const vector<int>& b) {
    int sz = a.size();
    int i = 0;
    for(i = 0; i < sz; i++) {
        if(a[i] != b[i]) break;
    }
    return i;
}

void solve() {
    int n, m; cin >> n >> m;
    vector<vector<int> > a(n, vector<int> (m, 0));
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> a[i][j];
            a[i][j]--;
        }
    }
    
    //역함수 만들기
    vector<vector<int> > b(n, vector<int> (m, 0));
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            b[i][a[i][j]] = j;
        }
    }
    sort(all(b));
    
    for(int i = 0; i < n; i++) {
        int ret = 0;
        int j = lower_bound(all(b), a[i]) - b.begin();
        if(j > 0) ret = max(ret, get(a[i], b[j-1]));
        if(j < n) ret = max(ret, get(a[i], b[j]));
        cout << ret << " ";
    }
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    int t; cin >> t;
    while(t--) {
        solve();
    }
}
