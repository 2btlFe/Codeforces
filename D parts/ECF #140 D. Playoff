/*
ECF #140 D. Playoff
Algorithm: dp, greedy
TC: O(N)
SC: O(1)
Explaination:


1) 순서에 상관이 없다
2) 고로 11..100..0 이런 식이 가능하다
3) 연속된 1의 구간에서 살아 남으려면 나보다 작은 숫자가 최소한 2^x-1 개 있어야 한다(subtree에서 제일 커야 한다)
4) 연속된 0의 구간에서 살아 남으려면 나보다 큰 숫자가 최소한 2^y-1개 있어야 한다(subtree에서 제일 작아야 한다)
5) 답은 [2^x, 2^n - 2^y + 1]
*/

#include <bits/stdc++.h>
#define ll long long
#define endl "\n"
#define all(x) x.begin(), x.end()
#define len(x) x.size()
 
using namespace std;

void solve() {
    int n; cin >> n;
    string s; cin >> s;
    
    int cnt = 0;
    for(int i = 0; i < n; i++) {
        if(s[i] == '1') cnt++;
    }
    
    for(int i = (1<<cnt); i <= (1<<n) - (1<<n-cnt) + 1; i++) {
        cout << i << " ";
    }
    
}
 
int main() {
    solve();
}
